# ASP.NET Core

# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  projectNameWebApi: 'App.WebApi'
  projectNameWebUiAdmin: 'App.WebUi.Admin'
  serviceConnection: 'Dev service connection quizapp'
  
stages:
- stage: publish
  displayName: Publish
  jobs:

  - job: publish
    displayName: Publish
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK 8.x'
      inputs:
        packageType: sdk
        version: '8.x'

    - task: AzureKeyVault@2
      displayName: 'Get keyvault values'
      inputs:
        azureSubscription: $(serviceConnection)
        KeyVaultName: 'ct-dev-kv'
        SecretsFilter: 'ConnectionStrings--DefaultConnection,AzureDevOps--SqlServerName,AzureDevOps--SqlDatabaseName'
        RunAsPreJob: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        
    - task: DotNetCoreCLI@2
      displayName: 'Build $(projectNameWebApi) - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/$(projectNameWebApi).csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish $(projectNameWebApi) - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/$(projectNameWebApi).csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - script: |
        dotnet tool install --global dotnet-ef
      displayName: 'Install dotnet-ef CLI'

    - task: DotNetCoreCLI@2
      displayName: 'Create Database EF Migration Bundle'
      inputs:
        command: 'custom'
        custom: 'ef'
        arguments: 'migrations bundle --self-contained -r linux-x64 --output efbundle'
        workingDirectory: '$(Build.SourcesDirectory)/App.DatabaseSource'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Database EF Migration Bundle'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/App.DatabaseSource/efbundle'
        ArtifactName: 'MigrationBundle'

- stage: deploy
  displayName: Deploy
  jobs:

  - job: publish_database
    displayName: Publish database
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: 'Download Database EF Migration Bundle'
      inputs:
        artifactName: 'MigrationBundle'
        targetPath: '$(Pipeline.Workspace)/MigrationBundle'
        
    - task: AzureCLI@2
      displayName: 'Wake up database'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        failOnStandardError: true
        inlineScript: |
          az sql db show --name $SQL_DATABASE_NAME --server $SQL_SERVER_NAME --resource-group $RESOURCE_GROUP
      env: 
        RESOURCE_GROUP: "dev"
        SQL_SERVER_NAME: $(AzureDevOps--SqlServerName)
        SQL_DATABASE_NAME: $(AzureDevOps--SqlDatabaseName)

    - task: AzureCLI@2
      displayName: 'Run Database EF Migration Bundle'
      inputs:
        azureSubscription: $(serviceConnection)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        failOnStandardError: true
        inlineScript: |
          # Allow agent IP address (since it is dynamic)
          ip=$(curl -s https://ipinfo.io/ip)
          az sql server firewall-rule create \
            --resource-group $RESOURCE_GROUP \
            --server $SQL_SERVER_NAME \
            --name AllowDevOpsAgent \
            --start-ip-address $ip \
            --end-ip-address $ip

          cd "$(Pipeline.Workspace)/MigrationBundle"
          # Allow execution of the bundle
          chmod +x ./efbundle
          ./efbundle --connection "$CONNECTION_STRING"

          # Remove agent IP address
          az sql server firewall-rule delete \
            --resource-group $RESOURCE_GROUP \
            --server $SQL_SERVER_NAME \
            --name AllowDevOpsAgent
      env:
        BUILD_ENVIRONMENT: "AzureDevOps"
        CONNECTION_STRING: $(ConnectionStrings--DefaultConnection)
        RESOURCE_GROUP: "dev"
        SQL_SERVER_NAME: $(AzureDevOps--SqlServerName)

  - job: publish_api
    dependsOn: publish_database
    displayName: Publish API
    steps:
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy $(projectNameWebApi)'
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: $(serviceConnection)
        appType: 'webApp'
        WebAppName: 'ct-dev-quizapp-api'
        packageForLinux: '$(Build.ArtifactStagingDirectory)/$(buildConfiguration)/**/$(projectNameWebApi).zip'